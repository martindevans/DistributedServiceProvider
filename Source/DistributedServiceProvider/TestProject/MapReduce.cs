using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using DistributedServiceProvider;
using DistributedServiceProvider.Base;
using DistributedServiceProvider.Contacts;
using Consumers.DataStorage;
using Consumers.Processing.MapReduce.Samples;
using DistributedServiceProvider.MessageConsumers;

namespace TestProject
{
    [TestClass]
    public class MapReduce
    {
        [TestMethod]
        public void WordCount()
        {
            #region correct result
            //generated by a simple python script
            Dictionary<string, int> correctResults = new Dictionary<string, int>()
            {
                {"houston", 1},
                {"playoffs", 1},
                {"just", 1},
                {"four", 1},
                {"ended", 1},
                {"25", 1},
                {"27", 1},
                {"23", 1},
                {"had", 1},
                {"winning", 2},
                {"to", 7},
                {"under", 1},
                {"division", 2},
                {"bambino", 1},
                {"none", 1},
                {"cardinals", 5},
                {"made", 1},
                {"five", 1},
                {"half", 1},
                {"world", 5},
                {"viewers", 1},
                {"earn", 1},
                {"louis", 1},
                {"team", 1},
                {"win–loss", 1},
                {"swept", 1},
                {"series", 13},
                {"national", 4},
                {"sox", 5},
                {"best", 4},
                {"curse", 2},
                {"for", 1},
                {"since", 3},
                {"fox", 1},
                {"won", 1},
                {"between", 1},
                {"new", 1},
                {"advance", 1},
                {"red", 5},
                {"dodgers", 1},
                {"sold", 1},
                {"million", 1},
                {"baseball", 1},
                {"york", 1},
                {"by", 3},
                {"card", 1},
                {"on", 2},
                {"central", 1},
                {"of", 5},
                {"earned", 1},
                {"against", 1},
                {"angeles", 1},
                {"american", 3},
                {"games", 1},
                {"first", 3},
                {"major", 1},
                {"into", 1},
                {"featured", 1},
                {"reached", 1},
                {"inflicted", 1},
                {"1986", 1},
                {"1987", 1},
                {"los", 1},
                {"been", 1},
                {"their", 5},
                {"stadium", 1},
                {"angels", 1},
                {"babe", 1},
                {"champion", 2},
                {"league", 8},
                {"season", 1},
                {"astros", 1},
                {"park", 1},
                {"broadcast", 1},
                {"1918", 1},
                {"berth", 2},
                {"october", 2},
                {"was", 5},
                {"record", 1},
                {"anaheim", 1},
                {"supposed", 1},
                {"wild", 1},
                {"and", 8},
                {"seven", 2},
                {"played", 2},
                {"boston", 1},
                {"it", 1},
                {"defeated", 2},
                {"an", 1},
                {"100th", 1},
                {"at", 1},
                {"have", 1},
                {"in", 7},
                {"watched", 1},
                {"busch", 1},
                {"trip", 1},
                {"memorial", 1},
                {"that", 1},
                {"when", 1},
                {"which", 1},
                {"ruth", 1},
                {"championship", 4},
                {"2004", 3},
                {"a", 2},
                {"1919", 1},
                {"average", 1},
                {"defeating", 1},
                {"st", 1},
                {"fenway", 1},
                {"the", 36},
                {"yankees", 2},
            };
            #endregion

            List<DistributedRoutingTable> network = CreateNetwork();

            Guid storeId = Guid.NewGuid();
            for (int i = 0; i < network.Count; i++)
                network[i].RegisterConsumer(new KeyValuePairStore(storeId));

            Guid taskId = Guid.NewGuid();
            for (int i = 0; i < network.Count; i++)
                network[i].RegisterConsumer(new WordCount(taskId, network[i].GetConsumer<KeyValuePairStore>(storeId)));

            IDictionary<string, int> result = network[1].GetConsumer<WordCount>(taskId).Run(
                "The 2004 World Series was the Major League Baseball championship series for the 2004 season. It was the 100th World Series and featured the American League champion Boston Red Sox, against the National League champion St. Louis Cardinals. The Red Sox defeated the Cardinals four games to none in the best-of-seven series, played at Fenway Park and Busch Memorial Stadium. The series was played between October 23 and October 27, 2004, broadcast on Fox, and watched by an average of just under 25 and a half million viewers. The Cardinals earned their berth into the playoffs by winning the National League Central, and had the best win–loss record in the National League. The Red Sox won the American League wild card to earn their berth. The Cardinals reached the World Series by defeating the Los Angeles Dodgers in the best-of-five National League Division Series, and the Houston Astros in the best-of-seven Championship Series. The Red Sox defeated the Anaheim Angels in the American League Division Series and the New York Yankees in the Championship Series to advance to their first World Series since 1986. The Cardinals made their first trip to the World Series since 1987. The Red Sox swept the series, winning their first championship since 1918, which ended the \"Curse of the Bambino\", a curse that was supposed to have been inflicted on the team when Babe Ruth was sold to the Yankees in 1919",
                4
            );

            Assert.AreEqual(result.Count, correctResults.Count);
            foreach (var item in result)
                Assert.AreEqual(item.Value, correctResults[item.Key]);

            TestUtilities.TestCallbackLeak(network);
        }

        [TestMethod]
        public void Sort()
        {
            List<int> data = new List<int>();
            for (int i = 0; i < 1000; i++)
                data.Add(i);

            Random r = new Random();
            for (int i = 0; i < 100000; i++)
            {
                int index = r.Next(data.Count);
                int tmp = data[index];
                data.RemoveAt(index);
                data.Insert(r.Next(data.Count), tmp);
            }

            List<DistributedRoutingTable> network = CreateNetwork();

            Guid taskId = Guid.NewGuid();
            for (int i = 0; i < network.Count; i++)
                network[i].RegisterConsumer(new Sort(taskId, data.ToArray(), 100));

            var sorted = new List<int>(network[1].GetConsumer<Sort>(taskId).Run());

            for (int i = 1; i < sorted.Count; i++)
            {
                Assert.IsTrue(sorted[i] > sorted[i - 1]);
            }
        }

        private List<DistributedRoutingTable> CreateNetwork()
        {
            Func<DistributedRoutingTable, Contact> contactFactory = drt =>
            {
                return new LocalContact(drt);
            };

            Guid networkId = Guid.NewGuid();
            Configuration config = new Configuration();
            DistributedRoutingTable table1 = new DistributedRoutingTable(Identifier512.NewIdentifier(), contactFactory, networkId, config);
            DistributedRoutingTable table2 = new DistributedRoutingTable(Identifier512.NewIdentifier(), contactFactory, networkId, config);
            DistributedRoutingTable table3 = new DistributedRoutingTable(Identifier512.NewIdentifier(), contactFactory, networkId, config);
            DistributedRoutingTable table4 = new DistributedRoutingTable(Identifier512.NewIdentifier(), contactFactory, networkId, config);
            DistributedRoutingTable table5 = new DistributedRoutingTable(Identifier512.NewIdentifier(), contactFactory, networkId, config);

            table1.Bootstrap(table2.LocalContact);
            table2.Bootstrap(table3.LocalContact);
            table3.Bootstrap(table4.LocalContact);
            table4.Bootstrap(table5.LocalContact);
            table5.Bootstrap(table1.LocalContact);

            return new List<DistributedRoutingTable>(new[] { table1, table2, table3, table4, table5 });
        }
    }
}
